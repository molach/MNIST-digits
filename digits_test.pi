import ann.

main =>
	println("Loading network"),
	Ann = nn_load("digits.net"),

	bp.pi_fann_print_parameters(Ann),
	println(),
	println("How many output neurons does the NN have? (look about 40 lines above in the terminal)"),
	Num_outputs = read_int(),

	format_testing_file(Num_outputs),

	println("Testing network"),
	Data = nn_load_data("digits.test"),
	if Num_outputs == 1 then
		nn_test1(Ann, Data)
	elseif Num_outputs == 10 then
		nn_test2(Ann, Data)
	end,

	println("Cleaning up."),
	nn_destroy([Data,Ann]).



format_testing_file(Num_outputs) =>
	println("How many examples do you want to use in your testing file (no more than 60,000)?"),
	Num_examples = read_int(),
	while (Num_examples > 60000)
		println("No more than 60,000 examples:"),
		Num_examples := read_int()
	end,

	Input_images = open("train-images-idx3-ubyte"),
	Input_tags = open("train-labels-idx1-ubyte"),
	Output = open("digits.test", write),
	
	% Discard irrelevant information at the beginning of the MNIST files.
	foreach(I in 1..16) Byte := read_byte(Input_images) end, 
	foreach(I in 1..8) Byte := read_byte(Input_tags) end,

	println(Output, Num_examples),
	println(Output, 784),
	println(Output, Num_outputs),
	println(Output, " "),

	foreach(I in 1..Num_examples)
		foreach(J in 1..784)
			Byte := read_byte(Input_images),
			print(Output, Byte), 
			print(Output, " ")
		end, 
		println(Output, " "),
		Byte := read_byte(Input_tags),
		if Num_outputs == 1 then
			println(Output, Byte)
		else
			if Byte == 0 then println(Output, "1 -1 -1 -1 -1 -1 -1 -1 -1 -1")
			elseif Byte == 1 then println(Output, "-1 1 -1 -1 -1 -1 -1 -1 -1 -1")
			elseif Byte == 2 then println(Output, "-1 -1 1 -1 -1 -1 -1 -1 -1 -1")
			elseif Byte == 3 then println(Output, "-1 -1 -1 1 -1 -1 -1 -1 -1 -1")
			elseif Byte == 4 then println(Output, "-1 -1 -1 -1 1 -1 -1 -1 -1 -1")
			elseif Byte == 5 then println(Output, "-1 -1 -1 -1 -1 1 -1 -1 -1 -1")
			elseif Byte == 6 then println(Output, "-1 -1 -1 -1 -1 -1 1 -1 -1 -1")
			elseif Byte == 7 then println(Output, "-1 -1 -1 -1 -1 -1 -1 1 -1 -1")
			elseif Byte == 8 then println(Output, "-1 -1 -1 -1 -1 -1 -1 -1 1 -1")
			elseif Byte == 9 then println(Output, "-1 -1 -1 -1 -1 -1 -1 -1 -1 1")
			end
		end,
		println(Output, " ")
	end,

	close(Input_images),
	close(Input_tags),
	close(Output).




nn_test1(Ann, Data) =>
	bp.pi_fann_length_train_data(Data, L),
	foreach(I in 0..(L - 1))
		nn_get_data(Data, I, In, Out),
		Res = nn_predict(Ann, In, [$scaleIn(1), $scaleOut(-1), resetMSE]),
		if Res[1] == Out[1] then 
			println("Correct result")
		else
			printf("Incorrect prediction: %f, actual digit: %f %n", Res[1], Out[1])
		end
	end.



nn_test2(Ann, Data) =>
	bp.pi_fann_length_train_data(Data, L),
	foreach(I in 0..(L - 1))
		nn_get_data(Data, I, In, Out),
		Res = nn_predict(Ann, In, [$scaleIn(1), $scaleOut(-1), resetMSE]),
		Prediction = index_of_max(Res),
		Correct_answer = index_of_max(Out),
		if Prediction == Correct_answer then 
			println("Correct result")
		else
			printf("Incorrect prediction: %f, actual digit: %f %n", Prediction, Correct_answer)
		end
	end.


index_of_max(Array) = Index =>
	Max = -100000000,
	Index = -1,
	foreach(I in 1..len(Array))
		if Array[I] > Max then
			Max := Array[I],
			Index := I
		end
	end.







